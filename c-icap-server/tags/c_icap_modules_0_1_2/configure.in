dnl Process this file with autoconf to produce a configure script.


AC_INIT(c_icap_modules,0.1.2)

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(autoconf.h)

AM_INIT_AUTOMAKE([subdir-objects])

AC_PROG_CC
AM_PROG_CC_C_O

AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

dnl AC_CANONICAL_HOST

CFLAGS="$CFLAGS -Wall"

#check for c-icap
AC_ARG_WITH(c-icap,
[  --with-c-icap	Where to find c-icap ],
[
    cicapdir="$withval"
    if test -f $withval/bin/c-icap-config; then
       cicapflags=`$withval/bin/c-icap-config --cflags`
       cicaplibs=`$withval/bin/c-icap-config --libs`
       cicapetc=`$withval/bin/c-icap-config --configdir`
       cicapprefix=`$withval/bin/c-icap-config --prefix`
       cicapmods=`$withval/bin/c-icap-config --modulesdir`
    else
       cicapflags=`c-icap-config --cflags`
       cicaplibs=`c-icap-config --libs` 
       cicapetc=`c-icap-config --configdir`
       cicapprefix=`c-icap-config --prefix`
       cicapmods=`c-icap-config --modulesdir`
    fi
],
)

if test -z "$cicapdir"; then
    if c-icap-config >& /dev/null; then
        cicapflags=`c-icap-config --cflags`
        cicaplibs=`c-icap-config --libs` 
        cicapetc=`c-icap-config --configdir`
        cicapprefix=`c-icap-config --prefix`
        cicapmods=`c-icap-config --modulesdir`
    else
        echo "ERROR: c-icap-config not found!"
	exit -1;
    fi
fi

AM_CONDITIONAL(CICAPMODULESDIR, [test -n $cicapmods])

CFLAGS="$CFLAGS $cicapflags"
MODULES_LIBADD="$cicaplibs"
CONFDIR="$cicapetc"
MODSDIR="$cicapmods"
AC_SUBST(MODULES_LIBADD)
AC_SUBST(CONFDIR)
AC_SUBST(MODSDIR)

# Checks for libraries

AC_ARG_WITH(clamav,
[  --with-clamav	Where to find ClamAv ],
[ case "$withval" in
  yes)
#    AC_MSG_WARN([--with-clamav called without argument])
    clamav="yes"
  ;;			     
  no )
    clamav="no"
  ;;
  * )
    clamav="yes"
    clamavinc=-I"$withval"/include
    clamavlib=-L"$withval"/lib
  ;;
  esac
],
)

AC_SUBST(clamavinc)
AC_SUBST(clamavlib)
OLD_CFLAGS=$CFLAGS
CFLAGS=$clamavinc
AC_MSG_CHECKING([for clamav 0.90.x or newer])
AC_TRY_COMPILE(
[#include <clamav.h>], 
[struct cl_engine node; node.refcount=1;],
AC_DEFINE(HAVE_LIBCLAMAV_09X,1,[Define HAVE_LIBCLAMAV_09X if have clamav 0.90.x or newer])
AC_MSG_RESULT(yes), 
AC_MSG_RESULT(no),
)

AC_MSG_CHECKING([for maxratio field in cl_limits struct])
AC_TRY_COMPILE(
[#include <clamav.h>], 
[struct cl_limits limits; limits.maxratio=200;],
AC_DEFINE(HAVE_LIBCLAMAV_LIMITS_MAXRATIO,1,[Define HAVE_LIBCLAMAV_LIMITS_MAXRATIO if has cl_limits.maxratio])
AC_MSG_RESULT(yes), 
AC_MSG_RESULT(no),
)

#
# clamav drop the cl_limits struct at version 0.95. I think it is 
# a good check for clamav lib version.
AC_MSG_CHECKING([for clamav 0.95 or newer])
AC_TRY_COMPILE(
[#include <clamav.h>], 
[struct cl_limits limist;],
AC_MSG_RESULT(no), 
AC_DEFINE(HAVE_LIBCLAMAV_095,1,[Define HAVE_LIBCLAMAV_095 if have clamav 0.95.x or newer])
AC_MSG_RESULT(yes),
)
# restore flags  / clamav tests
CFLAGS=$OLD_CFLAGS

libdb="yes"
AC_ARG_WITH(libdb,
[  --with-bdb        Where to find Berkeley DB library ],
[ case "$withval" in
    yes)
         libdb="yes"
    ;;
    no )
         libdb="no"
    ;;
    * )
        libdb=$withval
    ;;
  esac
],
)

if test a"$libdb" != "ano"; then
   if test a"$libdb" != "ayes"; then
        AC_CHECK_LIB(db,  db_version,
                     [BDB_ADD_LDFLAG="-L $libdb/lib -ldb"; BDB_ADD_FLAG="-I$libdb/lib"; AC_DEFINE(HAVE_BDB, 1, [Define HAVE_BDB if berkeley DB is installed])],
                     [libdb="no"]
                     )
        AC_SUBST(BDB_ADD_LDFLAG)
        AC_SUBST(BDB_ADD_FLAG)
   else
        AC_CHECK_LIB(db,  db_version,
                     [BDB_ADD_LDFLAG=" -ldb"; AC_DEFINE(HAVE_BDB, 1, [Define HAVE_BDB if berkeley DB is installed])],
                     [libdb="no"]
                     )
        AC_SUBST(BDB_ADD_LDFLAG)
   fi
fi

# Now determine which modules will going to build .....

AM_CONDITIONAL(USECLAMAV,[test a"$clamav" != ano])
AM_CONDITIONAL(USEBDB,   [test a"$libdb" != ano])

AC_OUTPUT([Makefile services/Makefile services/clamav/Makefile services/url_check/Makefile modules/Makefile])
